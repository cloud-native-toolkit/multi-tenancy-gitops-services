ibm-ssp-cm:
# Default values for IBMÂ® Sterling Secure Proxy - Configuration Manager for Linux Helm Chart a.k.a IBM Certified Container Software (IBMCCS).
# This is a YAML-formatted file.
# Declare variables to be passed into your templates. To override the default values either change in this file or use
# --set option provided by helm cli.
# Change license to true to indicate that you have read and agree to license agreements
# Refer: http://www-03.ibm.com/software/sla/sladb.nsf (L/N: L-KNAN-C6EJKA)
  license: true

  # Specify the license edition as per license agreement. Valid value is prod or non-prod for Production and
  # Non-production respectively. Remember that this parameter is crucial for IBM Licensing and Metering Service
  licenseType: non-prod

  # This name will be appended to release name to form the name of the resources created by this chart

  # Specify the respective Docker Image details for IBMCCS
  image:
    # Specify the repository name along with image name
    repository: "cp.icr.io/cp/ibm-ssp-cm/ssp-cm-docker-image"
    # Specify the tag name for the image
    tag: "6.0.3.0.02"
    # Specify the image pull secret for the service, if the image is in private registry
    imageSecrets: "ssp-imageregistrysecret"
    # Enable true/false to use image digest
    digest:
      enabled: false
      value: sha256:3600a0f1138a77ad42cecd4f986b37c0d77d63858c4a8c2c63a5ad61a9957bd6
    # Specify respective pull policy to used to override default `IfNotPresent` policy
    pullPolicy: IfNotPresent
  # Currently, the only supported architecture for IBMCCS is `amd64`
  arch: "amd64"
  # Specify these fields to provide config values for CM application
  cmArgs:
     # Set the value "true" to Generate Key Certificate, if you are installing Secure Proxy CM first.
     # Set the value "false" to Import Key Cert Exported from Secure Proxy Engine if you have installed Secure Proxy Engine first.
    keyCertExport: true
    # Set the certificate alias value.
    keyCertAliasName: "keycert"
    # JVM max heap size - don't set more than container limit resource memory.
    maxHeapSize: "2048m"


  # persistence section specifies persistence volume claim settings which apply to the whole chart
  persistentVolume:
    # enabled is whether to use Persistent Volumes or not
    enabled: true
    # useDynamicProvisioning is whether or not to use Storage Classes to dynamically create Persistent Volumes
    useDynamicProvisioning: false
    # Specify the existing PV claim name to be used for deployment
    existingClaimName: "ssp-cm-pvc"
    # Specify this to use selector label name for PV-PVC bind
    labelName: "app.kubernetes.io/name"
    # Specify this to use selector label value for PV-PVC bind
    labelValue: "ibm-ssp-cm-pvc"
    # Specify this to set storage class name
    storageClassName: "manual"
    # Specify this to set PVC size
    size: 2Gi
    # Specify this to set access mode
    accessMode: "ReadWriteOnce"

  # Manage PV directory using Supplemental Group ID if needed.
  storageSecurity:
    supplementalGroupId: ""

  # Specify these fields for Services
  service:
    # Specify this to set service type.
    type: "LoadBalancer"
    # Specify this to set load balancer IP. It's added for cloud environment.
    loadBalancerIP: ""
    # Specify this to set external IP to access application outside the cluster.
    # externalIP: "141.125.97.203"
    # Specify this to set annotations
    annotations: {}
      #service.kubernetes.io/ibm-load-balancer-cloud-provider-ip-type: public
      #service.kubernetes.io/ibm-load-balancer-cloud-provider-name: cm
      #service.kubernetes.io/ibm-load-balancer-cloud-provider-zone: main01

    # Specify this to set external traffic policy
    externalTrafficPolicy: ""
    # Specify this to set session Affinity
    sessionAffinity: "ClientIP"
    jetty:
      # CM web application is accessed by using below mentioned service port, so add as per the requirement else it would be set 8443 as default port.
      servicePort: 8443
      # If traditional jetty port is different from 8443 while migrating from traditional to container environment then in this case
      # we need to change container port as traditional jetty port value else It is not required to change the container port value.
      containerPort: 8443
    cm:
      # CM is listen on the below mentioned service port, so add as per the requirement else it would be set 62366 as default port.
      servicePort: 62366
      # If traditional CM listen port is different from 62366 while migrating from traditional to container environment then in this case
      # we need to change container port as traditional CM listen port value else It is not required to change the container port value.
      containerPort: 62366


  # Specify the Secret configuration for Configuration Manager
  secret:
    # Secret name for PassPhase and Password
    secretName: "ibm-ssp-cm-secret"
    # Secret name for Key Certificate - Use only, if you are installing Configuration Manager after Engine otherwise it's not needed.
    keyCertSecretName: ""

  # Specify the service account details
  serviceAccount:
    # Set this field to `true` to create service account or `false` to use existing service account
    create: false
    # Specify the name of service account to be used
    name: "ssp-cm-serviceaccount"



  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ## Container CPU -  limit and request both are set 1 CPU(1000m) as default value but we can modify as per the requirement.
  ## Container Memory - limit and request both are set 2 GB as default value but we can modify as per the requirement.
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
      ephemeral-storage: "5Gi"
    requests:
      cpu: 1000m
      memory: 2Gi
      ephemeral-storage: "3Gi"

  affinity:
    # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity-beta-feature
    # The matchExpression for key 'kubernetes.io/arch' is automatically added based on
    # architecture preference specified in 'arch'
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution: []
    #    nodeSelectorTerms:
    #    - matchExpressions:
    #      - key: kubernetes.io/e2e-az-name
    #        operator: In
    #        values:
    #        - e2e-az1
    #        - e2e-az2
  # The matchExpression for key 'kubernetes.io/arch' is automatically added based on
  # architecture preference specified in 'arch'
      preferredDuringSchedulingIgnoredDuringExecution: []

    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution: []
      preferredDuringSchedulingIgnoredDuringExecution: []

    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution: []
      preferredDuringSchedulingIgnoredDuringExecution: []

  # liveness and readiness Probe
  livenessProbe:
    initialDelaySeconds: 200
    timeoutSeconds: 30
    periodSeconds: 60
    failureThreshold: 10

  readinessProbe:
    initialDelaySeconds: 190
    timeoutSeconds: 5
    periodSeconds: 60
    failureThreshold: 10

  # Set this to true create route in OpenShift cluster
  route:
    enabled: true

  # Set this to true to create Monitoring Dashboard for IBMCCS
  dashboard:
    enabled: false

  # The following files can be customized using key value pair in the list format.
  # conf/log4j.properties, bin/log.properties, bin/security.properties, bin/vendor.properties
  # Add/Update: Key and Value both must be provided in the below format.
  # <File Name Without Extension>_<Property Name>=<Property Value>
  customProperties: []
  # below is the example:
  #customProperties:
  #  - log4j_log4j.logger.org.apache.commons.beanutils=OFF
  #  - log_audit.log.maxfilesize=10MB


  # Add/Update VM arguments in the list format
  # <Key as Java property name>=<value>
  vmArguments: []
  # below is the example:
  #vmArguments:
  #  - Dssp.cm.jetty.sni.enable=false
  #  - DvalidateThruXSD=false
  #  - DsspcmDisableClientEndpointIdentification=true


  # Use custom common certificate. It updates the engine, CM, and web server certificate.
  # Exports the common certificate configuration into the PV mapped directory.
  # Exported certificate(commonKeyCertFile) can be imported into the Engine.
  # set the value "true" to update the custom certificate.
  # set the value "false" to not update the custom certificate.
  customCertificate:
    customCertEnabled: false
    # set key store certificate file name
    commonCertFile: ""
    # set alias name
    commonCertAlias: ""
    # set export key certificate file name and it can be imported into the Engine.
    commonKeyCertFile: ""
  # below is the example:
  #customCertificate:
  #  customCertEnabled: true
  #  commonCertFile: "commonKeyStore.p12"
  #  commonCertAlias: "commonCert"
  #  commonKeyCertFile: "commonDefKeyCert.txt"


  # The custom directories/files can be mapped using the list format.
  # For mapping, We need to provide full path of the file or directory.
  # First we need to create the directory with 'CM_RESOURCES' name if it is not available into PV.
  # and keep the custom directories/files into created directory.
  customFiles: []
  # In the below example we need to keep log4j2.xml file inside 'CM_RESOURCES' directory.
  # so that the container will copy this file into respective directory.
  #customFiles:
  #  - /conf/log4j2.xml

  # Set network policy
  # https://kubernetes.io/docs/concepts/services-networking/network-policies/
  networkPolicy:
    # apply policy type
    policyTypes:
    - Ingress
    - Egress

    # apply ingress rule. Default allow all ingress traffic.
    ingress:
    - from: []
      #- namespaceSelector:
       #   matchLabels:
        #    project: myproject
      #- podSelector:
       #   matchLabels:
        #    role: frontend
      #ports:
      #- protocol: TCP
       # port: 6379

    # apply egress rule. Default allow all egress traffic
    egress:
    - to: []
      #ports:
      #- protocol: TCP
       # port: 5978
